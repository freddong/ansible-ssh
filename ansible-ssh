#!/bin/bash
#set -x
debug=/usr/bin/false

usage() {
    echo "Usage: $(basename $0) [-i <inventory file name>] hostname <ssh arguments>"
}

while getopts ":i:" o; do
    case "${o}" in
        i)
            current_inventory=${OPTARG}
            if [ ! -f "$current_inventory" ]; then
               echo "inventory file $current_inventory not found" 
               exit
            fi

            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

for program in ansible-config ansible-inventory jq; do
    which "$program" > /dev/null || { echo "ERROR: not found: $program"; exit 1; }
done

if [ $# -eq 0 ]; then
    usage
    echo "Avaliable hosts:"
    # jq magic: https://stedolan.github.io/jq/manual/
    # .[] array/object value iterator
    # | combines two filters feeding output of left one into input of right one
    # .hosts? produces content of hosts key, no error if it does not exist
    # .[]? array/object value iterator, no error if output of . is not array or object (for example, it is null)
    #ansible-inventory --list | jq '.[] | .hosts? | .[]? ' | sort | uniq
    ansible-inventory -i $current_inventory --list | jq '. | with_entries(select(.value| has("hosts"))) '
    exit 1
fi

ssh_args=$(ansible-config dump | grep '^ANSIBLE_SSH_ARGS' | cut -d'=' -f2-)
ssh_executable=$(ansible-config dump | grep '^ANSIBLE_SSH_EXECUTABLE' | cut -d'=' -f2-)
$debug && echo "ssh_args: $ssh_args"
$debug && echo "ssh_executable: $ssh_executable"

host="$1"
# All other arguments are ssh arguments
shift

inventory=$(ansible-inventory -i $current_inventory --host "$host")
if [ $? -ne 0 ]; then
    echo "ERROR: ansible inventory failed to gather info on $host"
    exit 1
fi

# As of ansible 2.0, new style options like ansible_host override old style ansible_ssh_*
# Except ansible_ssh_common_args and ansible_ssh_extra_args
ansible_ssh_host=$(echo "$inventory" | jq ".ansible_ssh_host?" | grep -v '^null$' | tr -d \")
ansible_host=$(echo "$inventory" | jq ".ansible_host?" | grep -v '^null$' | tr -d \")
# Assign new value if variable is not set or empty
ansible_host="${ansible_host:-$ansible_ssh_host}"
$debug && echo "ansible_host: $ansible_host"
ansible_host=$host

ansible_ssh_user=$(echo "$inventory" | jq ".ansible_ssh_user?" | grep -v '^null$' | tr -d \")
ansible_user=$(echo "$inventory" | jq ".ansible_user? " | grep -v '^null$' | tr -d \")
ansible_user="${ansible_user:-$ansible_ssh_user}"
$debug && echo "ansible_user: $ansible_user"

ansible_ssh_port=$(echo "$inventory" | jq ".ansible_ssh_port?" | grep -v '^null$' | tr -d \")
ansible_port=$(echo "$inventory" | jq ".ansible_port?" | grep -v '^null$' | tr -d \")
ansible_port="${ansible_port:-$ansible_ssh_port}"
$debug && echo "ansible_port: $ansible_port"

ansible_ssh_common_args=$(echo "$inventory" | jq ".ansible_ssh_common_args" | grep -v '^null$' | tr -d \")
$debug && echo "ansible_ssh_common_args: $ansible_ssh_common_args"

ansible_ssh_extra_args=$(echo "$inventory" | jq ".ansible_ssh_extra_args" | grep -v '^null$' | tr -d \")
$debug && echo "ansible_ssh_extra_args: $ansible_ssh_extra_args"

ansible_private_key_file=$(echo "$inventory" | jq ".ansible_private_key_file?" | grep -v '^null$' | tr -d \")
$debug && echo "ansible_private_key_file: $ansible_private_key_file"

# We need to prepend hostname with username@
if [ -n "$ansible_user" ]; then ansible_user="${ansible_user}@"; fi

# If port is set, add it to ssh arguments
if [ -n "$ansible_port" ]; then ssh_args="$ssh_args -p $ansible_port"; fi

if [ -n "$ansible_private_key_file" ]; then ssh_args="$ssh_args -i $ansible_private_key_file"; fi

$debug && echo result command: ${ssh_executable} ${ansible_user}${ansible_host} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} $@
exec ${ssh_executable} ${ansible_user}${ansible_host} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} $@
#exec mosh --ssh="ssh ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args}" ${ansible_user}${ansible_host} $@
